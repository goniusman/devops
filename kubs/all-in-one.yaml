# kind: PersistentVolume
# apiVersion: v1
# metadata:
#   name: mongo-pv
#   labels:
#     type: local
# spec:
#   storageClassName: manual
#   capacity:
#     storage: 10Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: "/tmp/mongo/db"

# ---

# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: mongo-pv
# spec:
#   storageClassName: manual
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 3Gi

# ---

kind: Secret
apiVersion: v1
metadata:
  name: mongo-secret
  namespace: mongo
  # annotations:
  #   kubernetes.io/service-account.name: "sa-name"
# type: kubernetes.io/service-account-token
type: Opaque
data:
  # You can include additional key value pairs as you do with Opaque Secrets
  # extra: YmFyCg==
  mongo-user: bW9uZ291c2Vy
  mongo-password: bW9uZ29wYXNzd29yZA==

---

kind: ConfigMap
apiVersion: v1
metadata:
  name: mongo-config
  namespace: mongo
data:
  database_url: mongo-service

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: mongo-deployment
  namespace: mongo
  labels:
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-user
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-password
      #     volumeMounts:
      #       - mountPath: "/tmp/mongo/db"
      #         name: mongo-pv-storage
      # volumes:
      # - name: mongo-pv
      #   persistentVolumeClaim:
      #     claimName: mongo-pv

---

kind: Service
apiVersion: v1
metadata:
  name: mongo-service
  namespace: mongo
spec:
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: mongo-express
  namespace: mongo
  labels:
    app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
        - name: mongoexpress
          image: mongo-express
          ports:
            - containerPort: 8081
          env:
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-user
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-password
            - name: ME_CONFIG_MONGODB_SERVER
              valueFrom:
                configMapKeyRef:
                  name: mongo-config
                  key: database_url

---

kind: Service
apiVersion: v1
metadata:
  name: mongo-express-service
  namespace: mongo
spec:
  selector:
    app: mongo-express
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
      nodePort: 30001

# ---

# kind: Ingress
# apiVersion: networking.k8s.io/v1
# metadata:
#   name: mongo-ingress
#   namespace: mongo
# spec:
#   rules:
#     - host: dashboard.info
#       http:
#         paths:
#           # - path: /analytics
#           backend:
#             servicename: mongo-express-service
#             servicePort: 8081
#           # - path: /shopig
#           #   backend:
#           #     servicename: shopigservicesname
#           #     servicePort: 810















