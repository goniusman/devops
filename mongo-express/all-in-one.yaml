apiVersion: v1
kind: Secret
metadata:
  name: mongo-secret
  # namespace: my-namespace
  # annotations:
  #   kubernetes.io/service-account.name: "sa-name"
# type: kubernetes.io/service-account-token
type: Opaque
data:
  # You can include additional key value pairs as you do with Opaque Secrets
  # extra: YmFyCg==
  mongo-user: dXNlcg==  #user
  mongo-password: cGFzc3dvcmQ=  #password

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-claim0
  labels:
    app: mongo-claim0
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: manual 
  resources:
    requests:
      storage: 1Gi

---

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: manual
provisioner: k8s.io/minikube-hostpath
reclaimPolicy: Retain 
volumeBindingMode: Immediate

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-deployment
  # namespace: my-namespace
  labels:
    app: mongo
spec:
  serviceName: mongo-service
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo 
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: mongo-user
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: mongo-password
        volumeMounts:
        - mountPath: /data/db
          name: mongo-claim0
      volumes:
      - name: mongo-claim0
        persistentVolumeClaim:
          claimName: mongo-claim0

---

apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  # namespace: my-namespace
spec:
  selector:
    app: mongo
  # clusterIP: None
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-config
  # namespace: my-namespace
data:
  database_url: mongo-service

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  # namespace: my-namespace
  labels:
    app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
        - name: mongoexpress
          image: mongo-express
          ports:
            - containerPort: 8081
          env:
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-user
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-password
            - name: ME_CONFIG_MONGODB_SERVER
              valueFrom:
                configMapKeyRef:
                  name: mongo-config
                  key: database_url

---

apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
  # namespace: my-namespace
spec:
  selector:
    app: mongo-express
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
      nodePort: 30000

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dashboard-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
  # namespace: kubernetes-dashboard
spec:
  rules:
  - host: dash.local
    http:
      paths:
        - path: "/"
          pathType: Prefix
          backend:
            service:
              name: mongo-express-service
              port:
                number: 8081





